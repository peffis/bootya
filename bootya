#!/bin/sh

CURDIR=`pwd`
PROJECT=`basename $CURDIR`

wget https://raw.githubusercontent.com/ninenines/erlang.mk/master/erlang.mk

make -f erlang.mk bootstrap
make -f erlang.mk bootstrap-rel

cat > Makefile <<EOF
NO_AUTOPATCH += yaws
DEPS = yaws lager jiffy
dep_yaws = git https://github.com/klacke/yaws master
dep_lager = git https://github.com/basho/lager master
dep_jiffy = git https://github.com/davisp/jiffy master

include erlang.mk
EOF

mkdir src/www
cat > src/www/index.html <<EOF
It worked!
EOF

cat > "src/${PROJECT}_app.erl" <<EOF
-module(${PROJECT}_app).

-behaviour(application).

%% Application callbacks
-export([start/2, stop/1]).

%% ===================================================================
%% Application callbacks
%% ===================================================================

start(_StartType, _StartArgs) ->
    Ret = ${PROJECT}_sup:start_link(),
    
    %% start yaws in embedded mode under supervisor orch_sup 
    Id = "${PROJECT}_server",

    GconfList = [{logdir, "/tmp"},
		 {id, Id}],

    {ok, Docroot} = application:get_env(${PROJECT}, doc_root),

    SconfList = [{docroot, Docroot},
		 {port, 8080},    %% running on port 8080
		 {listen, {0, 0, 0, 0}},
		 {mime_types_info, [{default_type, "text/html"}]},
		 {appmods, [{"/$PROJECT", ${PROJECT}_appmod}]}],

    {ok, SCList, GC, ChildSpecs} =
	yaws_api:embedded_start_conf(Docroot, SconfList, GconfList, Id),
    
    %% assume our supervisor is registered as $PROJECT_sup
    [supervisor:start_child(${PROJECT}_sup, Ch) || Ch <- ChildSpecs],

    %% now configure Yaws
    yaws_api:setconf(GC, SCList),

    Ret.



stop(_State) ->
    ok.

EOF

cat > "src/${PROJECT}.app.src" <<EOF
{application, ${PROJECT},
 [
  {description, ""},
  {vsn, "0.9"},
  {registered, []},
  {applications, [
                  kernel,
                  stdlib,
		  crypto,
		  lager
                 ]},
  {mod, { ${PROJECT}_app, []}},
  {included_applications, [yaws, jiffy]},
  {modules, []},
  {env, []}
 ]}.
EOF


cat > "src/${PROJECT}_appmod.erl" <<EOF
-module(${PROJECT}_appmod).
-export([out/1]).
-compile([{parse_transform, lager_transform}]).

-include("deps/yaws/include/yaws_api.hrl").



out(A) ->
    Uri = yaws_api:request_url(A),
    Path = string:tokens(Uri#url.path,"/"),
    Method = (A#arg.req)#http_request.method,
    out(A, Method, Path).

out(_, 'GET', ["${PROJECT}", "hello"]) ->
    {ehtml, [{pre, [], "hello"}]}.
EOF

cat > "rel/sys.config" <<EOF
[
    {${PROJECT}, [ {doc_root, "${CURDIR}/src/www"} ]}
].
EOF
